{"version":3,"sources":["js/App.js","js/data.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","activeId","getItems","bind","assertThisInitialized","focus","blur","e","id","target","setState","data","_this2","map","section","react_default","a","createElement","key","className","concat","children","title","tabIndex","onClick","onFocus","onBlur","content","Component","react","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59fe21b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './../css/app.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      activeId: ''\n    }\n    this.getItems = this.getItems.bind(this)\n    this.focus = this.focus.bind(this)\n    this.blur = this.blur.bind(this)\n  }\n\n  focus(e, id) {\n    e.target.focus()\n    this.setState((state) => ({\n      activeId: id\n    }))\n  }\n\n  blur() {\n    this.setState((state) => ({\n      activeId: ''\n    }))\n  }\n\n  getItems(data) {\n    return data.map((section) => {\n      return (\n        <section\n          key={section.id}\n          className={`section ${this.state.activeId === section.id ? 'section--active' : ''}`}\n        >\n          <h2\n            className={`section__heading heading--${section.id}`}\n            children={section.title}\n            tabIndex=\"0\"\n            onClick={(e) => this.focus(e, section.id)}\n            onFocus={(e) => this.focus(e, section.id)}\n            onBlur={() => this.blur()}\n          />\n          <div\n            className=\"section__content\"\n            children={section.content}\n          />\n        </section>\n      )\n    })\n  }\n\n  render() {\n    return (\n      this.getItems(this.props.data)\n    )\n  }\n}\n\nexport default App;\n","import React, { Fragment } from 'react';\n\nexport const data = [\n  {\n    id: 'person',\n    title: <Fragment>Personal <span>details</span></Fragment>,\n    content: <Fragment>\n      <h3>About me</h3>\n      <p>I'm a Canadian living and working in Sheffield&nbsp;UK.</p>\n      <p>I am a front end developer with over 10 years of experience as part of agency and in-house teams. In addition to technical excellence, I am a leader of people and advocate for inclusive work cultures.</p>\n    </Fragment>\n  },\n  {\n    id: 'skills',\n    title: <Fragment>Developer <span>skills</span></Fragment>,\n    content: <Fragment>\n      <h3>User-centric approach</h3>\n      <p>I focus on the intersection of user need, client demand, and technical limitation. I prioritise user experience, accessibility, and brand identity in my work.</p>\n      <h3>HTML, CSS, JavaScript</h3>\n      <p>I write accessible HTML styled with SCSS. I have experience with React, Redux, Styled Components, and complex JavaScript applications. I work with my team to ensure quality code, modularity, and maintainability.</p>\n   </Fragment>\n  },\n  {\n    id: 'leadership',\n    title: <Fragment><span>People</span> leadership</Fragment>,\n    content: <Fragment>\n      <h3>Leader and organiser</h3>\n      <p>I am organised and proactive. I strive to create and encourage a safe and inclusive work environment for everyone.</p>\n      <h3>Manager and mentor</h3>\n      <p>I play an active role in recruitment and am an experienced line manager.</p>\n    </Fragment>\n  },\n  {\n    id: 'jobs',\n    title: <Fragment>Employment <span>history</span></Fragment>,\n    content: <Fragment>\n      <ul>\n        <li>\n          <h3>Inviqa</h3>\n          Technical team lead, Senior front end developer (2013&nbsp;&#8209;&nbsp;present)\n        </li>\n        <li>\n          <h3>Evoluted</h3>\n          Lead front end developer (2017&nbsp;&#8209;&nbsp;2018)\n        </li>\n        <li>\n          <h3>Previous roles</h3>\n          Mountain Equipment Co-op,\n          Vancity,\n          University of York,\n          University of Western Ontario\n        </li>\n      </ul>\n    </Fragment>\n  },\n  {\n    id: 'contact',\n    title: <Fragment>Contact me <span>online</span></Fragment>,\n    content: <Fragment>\n        <ul>\n        <li>\n          <a href=\"https://www.twitter.com/chicgeek\">chicgeek on Twitter</a>\n        </li>\n        <li>\n            <a rel=\"me\" href=\"https://mastodon.social/@chicgeek\">chicgeek on Mastodon.social</a>\n        </li>\n        <li>\n            <a href=\"https://www.github.com/chicgeek\">chicgeek on Github</a>\n        </li>\n        <li>\n            <a href=\"https://www.linkedin.com/in/chicgeek\">chicgeek on LinkedIn</a>\n        </li>\n        <li>\n            <a href=\"mailto:hello@laurakishimoto.com?subject=An email from laurakishimoto.com\">Email me at hello@laurakishimoto.com</a>\n        </li>\n      </ul>\n    </Fragment>\n  }\n]\n\nexport default data;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './js/App';\nimport data from './js/data';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App data={data} />,\n    document.getElementById('main')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}